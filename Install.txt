기본적으로 tsconfig.json이 설치되어 있으나, 혹시 파일이 없다면,
npx typescript --init
으로 만들어 줌

tsconfig.json 설정을 조금 만져준다.

컴파일 할때 옵션들.

include : 컴파일할 파일 경로 설정
exclude : 컴파일에서 제외하는 대상
compilerOptions : 컴파일할 때 적용되는 옵션들
target : 어떤 버전으로 컴파일할 것인지 작성
module : 어떤 모듈 방식으로 컴파일할지 설정

----- 여기서부터는 실제 적용한 것 -----
{
  "compilerOptions": {
    "target": "es6", //어떤버전의 js로 컴파일할지 정의
    "lib": [ //어떤 환경에서 사용하는지 정의(api자동완성 제공해줌)
      "dom", //브라우저
      "dom.iterable",
      "esnext"
    ],
    "baseUrl": "./src", // 추가된 것 ./src를 절대 경로로 지정
    "allowJs": true, //ts안에서 js허용(js파일 import가능)
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [ //컴파일할 폴더 입력. src의 모든파일 확인함
    "src"
  ],
  "exclude": [
    "node_modules"   
  ],
}


npm install --save-dev @babel/plugin-proposal-private-property-in-object
이걸 설치해 준다. 바벨 타입적용

---- eslint 및 prettier설정
*타입스크립트는 조금 다름
npm i -D @typescript-eslint/eslint-plugin @typescript-eslint/parser
위에꺼는 리액트/타입스크립트 프로젝트 생성시 기본으로 있을 수 있음

아래꺼는 설치해야함
npm i -D eslint-config-prettier eslint-plugin-prettier

TS에서 사용시 아래와 같이 세팅
.prettierrc---
{
  "semi": true,
  "singleQuote": true,
  "trailingComma": "all",
  "arrowParens": "always"
}

.eslintrc.js---
/* eslint-disable no-undef */
module.exports = {
  parser: '@typescript-eslint/parser',
  plugins: ['react', '@typescript-eslint'],
  env: {
    browser: true,
    es2021: true,
  },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react/recommended',
    'prettier',
  ],
  overrides: [],
  parserOptions: {
    ecmaVersion: 2021,
    sourceType: 'module',
    ecmaFeatures: {
      jsx: true,
    },
  },
  rules: {
    'react/prop-types': 'off',
    'react/react-in-jsx-scope': 'off',
    'react/jsx-filename-extension': [1, { extensions: ['.jsx', '.tsx'] }],
    '@typescript-eslint/no-explicit-any': 'off',
    // 아래꺼는 나중에 뺴야함
    // 'no-unused-vars': 'off',
    // '@typescript-eslint/no-unused-vars': 'off',
  },
  settings: {
    react: {
      version: 'detect',
    },
  },
};

.vscode / settings.json
{
  "[javascript]": {
    "editor.maxTokenizationLineLength": 2500,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
  },
  "[javascriptreact]": {
    "editor.maxTokenizationLineLength": 2500,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode",
  },
  "[typescript]": {
    "editor.maxTokenizationLineLength": 2500,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.maxTokenizationLineLength": 2500,
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  }
}
